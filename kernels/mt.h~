//*******************************************************************************
//****     Pseudo Random Number Generator       *********************************
//*******************************************************************************

typedef struct {
  uint32_t aaa;
  int mm,nn,rr,ww;
  uint32_t wmask,umask,lmask;
  int shift0, shift1, shiftB, shiftC;
  uint32_t maskB, maskC;
  int i;
  uint32_t state[MT_NN];
}mt_struct;

void sgenrand_mt(uint32_t seed, mt_struct *mts) 
{
  int i;

  for (i=0; i<mts->nn; i++) {
    mts->state[i] = seed;
    seed = ( (1812433253U) * (seed  ^ (seed >> 30))) + i + 1;
  }
  mts->i = mts->nn;

  for (i=0; i<mts->nn; i++) 
    mts->state[i] &= mts->wmask;
}

uint32_t genrand_mt(mt_struct *mts) 
{
  uint32_t *st, uuu, lll, aa, x;
  int k,n,m,lim;

  if ( mts->i >= mts->nn ) {
    n = mts->nn; m = mts->mm;
    aa = mts->aaa;
    st = mts->state;
    uuu = mts->umask; lll = mts->lmask;

    lim = n - m;
    for (k=0; k<lim; k++) {
      x = (st[k]&uuu)|(st[k+1]&lll);
      st[k] = st[k+m] ^ (x>>1) ^ (x&1U ? aa : 0U);
    }
    lim = n - 1;
    for (; k<lim; k++) {
      x = (st[k]&uuu)|(st[k+1]&lll);
      st[k] = st[k+m-n] ^ (x>>1) ^ (x&1U ? aa : 0U);
    }
    x = (st[n-1]&uuu)|(st[0]&lll);
    st[n-1] = st[m-1] ^ (x>>1) ^ (x&1U ? aa : 0U);
    mts->i=0;
  }
  
  x = mts->state[mts->i];
  mts->i += 1;
  x ^= x >> mts->shift0;
  x ^= (x << mts->shiftB) & mts->maskB;
  x ^= (x << mts->shiftC) & mts->maskC;
  x ^= x >> mts->shift1;

  return x;
}


float myrand(mt_struct *mts){
  return ( (float)genrand_mt(mts) ) / ((float) 0xFFFFFFFF) ;
}
